## If this is the first time you sue the R packages rjson and RCurl
## you would have to install them:
install.packages("rjson")
install.packages("RCurl")
## load the packages "rjson" and "RCurl"
library(rjson)
library(RCurl)
pic_Ron<- "http://www.demog.berkeley.edu/images/ron_lee2.jpg"
## Register your Face++ APP
## go to http://www.faceplusplus.com/create-a-new-app/
## and follow the directions to create an APP
## copy your API Key and Api Secret and paste them below.
my_api_key<-	"KkOYC7Eb9z7t6t8E3XQMR5Rbs"
my_api_secret<-	"9EQfnWqKDsJ3PlSoz7VCLRR0AygVYDCujp96ZtnObwEfcUAmpC"
url_for_request<- paste("http://apius.faceplusplus.com/v2/detection/detect?api_key=",my_api_key,"&api_secret=",my_api_secret,"&url=",pic_Ron,"&attribute=age%2Cgender%2Crace%2Csmiling%2Cpose%2Cglass",sep="")
url_for_request
plain_json_output<- getURL(url_for_request)
plain_json_output
#writeLines(plain_json_output, "Ron_output.json")
plain_json_output<-readLines("Ron_output.json")
## convert the json output into a list
output_list <- fromJSON(paste(plain_json_output,collapse=""))
output_list
pic_Ron <- "https://429e101c-a-62cb3a1a-s-sites.googlegroups.com/site/carlogiovannicamarda/Home/IMG_0098.JPG?attachauth=ANoY7co438o4W4PY5QrxGzfUMaPxQPxZTU0kzE1fUPZTEHojMRkULkydd62rLu8p9f2M8w5IOfUyKmiJhplaVrw2VUE5UoAkCGdk-AiNc9HdgGglAjPGGp8cu4hAxeDmxNZQl5_dAm1SVNUvIfctH67d6ha3K5gMc9RBfCDjbepFcwjgdqMONWAo6hRnzc3NLgaDrBz9ocmaCp8eaoLLq0ZUqdN4bETQMzcK0VoZ5m3iL_y8V-rFWo4%3D&attredirects=0"
url_for_request<- paste("http://apius.faceplusplus.com/v2/detection/detect?api_key=",my_api_key,"&api_secret=",my_api_secret,"&url=",pic_Ron,"&attribute=age%2Cgender%2Crace%2Csmiling%2Cpose%2Cglass",sep="")
url_for_request
plain_json_output<- getURL(url_for_request)
plain_json_output
plain_json_output<-readLines("Ron_output.json")
## convert the json output into a list
output_list <- fromJSON(paste(plain_json_output,collapse=""))
output_list
output_list$face[[1]]$attribute$age$value
pic_Ron <- "https://429e101c-a-62cb3a1a-s-sites.googlegroups.com/site/carlogiovannicamarda/Home/IMG_0098.JPG?attachauth=ANoY7co438o4W4PY5QrxGzfUMaPxQPxZTU0kzE1fUPZTEHojMRkULkydd62rLu8p9f2M8w5IOfUyKmiJhplaVrw2VUE5UoAkCGdk-AiNc9HdgGglAjPGGp8cu4hAxeDmxNZQl5_dAm1SVNUvIfctH67d6ha3K5gMc9RBfCDjbepFcwjgdqMONWAo6hRnzc3NLgaDrBz9ocmaCp8eaoLLq0ZUqdN4bETQMzcK0VoZ5m3iL_y8V-rFWo4%3D&attredirects=0"
url_for_request<- paste("http://apius.faceplusplus.com/v2/detection/detect?api_key=",my_api_key,"&api_secret=",my_api_secret,"&url=",pic_Ron,"&attribute=age%2Cgender%2Crace%2Csmiling%2Cpose%2Cglass",sep="")
url_for_request
## what did you observe?
##################################
## 3. GET THE OUTPUT FROM THE REQUEST
##################################
plain_json_output<- getURL(url_for_request)
plain_json_output
#writeLines(plain_json_output, "Ron_output.json")
plain_json_output<-readLines("Ron_output.json")
## convert the json output into a list
output_list <- fromJSON(paste(plain_json_output,collapse=""))
output_list
pic_Ron <- "https://429e101c-a-62cb3a1a-s-sites.googlegroups.com/site/carlogiovannicamarda/Home/IMG_0098.JPG"
my_api_key<-	"KkOYC7Eb9z7t6t8E3XQMR5Rbs"
my_api_secret<-	"9EQfnWqKDsJ3PlSoz7VCLRR0AygVYDCujp96ZtnObwEfcUAmpC"
###########################
## 2. PREPARE A REQUEST ####
###########################
## Make sure you understand the various components following URL
## then copy it and paste it in your web browser
url_for_request<- paste("http://apius.faceplusplus.com/v2/detection/detect?api_key=",my_api_key,"&api_secret=",my_api_secret,"&url=",pic_Ron,"&attribute=age%2Cgender%2Crace%2Csmiling%2Cpose%2Cglass",sep="")
url_for_request
## what did you observe?
plain_json_output<- getURL(url_for_request)
plain_json_output
#writeLines(plain_json_output, "Ron_output.json")
plain_json_output<-readLines("Ron_output.json")
## convert the json output into a list
output_list <- fromJSON(paste(plain_json_output,collapse=""))
output_list
### PAA 2017
### Workshop on Social Media for Demographic Research
### April 2017
### Zagheni-Polimis-Fiorio
### Collect and Analyze Tweets
### Part 1 Twitter Authentication
### For data collection we will use the R package "streamR" created by Pablo Barbera
## remove any previously saved objects in your R environment
rm(list=ls())
#check the directory where you are
getwd()
## If you are not in the folder "Collect_Tweets", move to that folder
## using the following command
## setwd("YOUR_PATH_TO_THE_FOLDER")
## Alternatively, using the drop-down menu of RStudio
## select Session -> Set Working Directory -> To Source File Location
##Install the packages below and their dependecies
install.packages("devtools")
#install.packages("streamR", dependencies=TRUE)
install.packages("twitteR")
install.packages("ROAuth")
library(devtools)
install_github("streamR", "pablobarbera", subdir="streamR")
library(twitteR)
library(streamR)
library(ROAuth)
##parameters and URLs for the Twitter API
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL<- "https://api.twitter.com/oauth/access_token"
authURL<- "https://api.twitter.com/oauth/authorize"
consumerKey <- "KkOYC7Eb9z7t6t8E3XQMR5Rbs"
consumerSecret<- "9EQfnWqKDsJ3PlSoz7VCLRR0AygVYDCujp96ZtnObwEfcUAmpC"
twitCred<- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
pic_Ron <- "https://429e101c-a-62cb3a1a-s-sites.googlegroups.com/site/carlogiovannicamarda/Home/IMG_0098.JPG?attachauth=ANoY7cpVKtFffbo_EA09Ik5__Vevq2jT77DMEVAli2pH_FNPRf04WC3nEmnW-Fe2ajHIlPYYcAL_nXqqg5LM-PZblG1cmkakF9qb7Rf-jDDZvPisb05KgNixDro60FYeAipmYCqDxibGDrO5J6OkLLqgVTNnJhnDgtP4WNahGZ5LE9zSgFccWsB0f8Bgn63DC8mzsrQOAj_wGRPtDlfi2N180w7RI3WXcOhOOSDt2K7C7BKakM782rI%3D&attredirects=0"
my_api_key<-	"KkOYC7Eb9z7t6t8E3XQMR5Rbs"
my_api_secret<-	"9EQfnWqKDsJ3PlSoz7VCLRR0AygVYDCujp96ZtnObwEfcUAmpC"
###########################
## 2. PREPARE A REQUEST ####
###########################
## Make sure you understand the various components following URL
## then copy it and paste it in your web browser
url_for_request<- paste("http://apius.faceplusplus.com/v2/detection/detect?api_key=",my_api_key,"&api_secret=",my_api_secret,"&url=",pic_Ron,"&attribute=age%2Cgender%2Crace%2Csmiling%2Cpose%2Cglass",sep="")
url_for_request
## what did you observe?
##################################
## 3. GET THE OUTPUT FROM THE REQUEST
##################################
plain_json_output<- getURL(url_for_request)
plain_json_output
system("mkdir credentials")
## Save the authentication object
save(twitCred, file = "credentials/twitCred.Rdata")
twitCred
system("mkdir credentials")
getwd()
save(twitCred, file = "credentials/twitCred.Rdata")
getwd()
twitCred
system
system("mkdir credentials")
save(twitCred, file = "credentials/twitCred.Rdata")
save(twitCred, file = "credentials/twitCred.Rdata")
setwd("C:/Users/jmaburto/Desktop/paa_2017_social_media-master/Collect_Tweets")
rm(list=ls())
setwd("C:/Users/jmaburto/Desktop/paa_2017_social_media-master/Collect_Tweets")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL<- "https://api.twitter.com/oauth/access_token"
authURL<- "https://api.twitter.com/oauth/authorize"
##1. Create a Twitter account: sign up at Twitter.com
##2. If you have a Twitter account, but it is not verified with a phone, you would need to verify the account, by adding a mobile phone number.
## Here is a link to the instructions: https://support.twitter.com/articles/110250
##3. Create a new app by going to https://apps.twitter.com
##You should leave the "callback website" field empty
##4.Obtain your consumer key and secret and insert them below
consumerKey <- "KkOYC7Eb9z7t6t8E3XQMR5Rbs"
consumerSecret<- "9EQfnWqKDsJ3PlSoz7VCLRR0AygVYDCujp96ZtnObwEfcUAmpC"
#download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
twitCred<- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
## insert the number in the R console after you run this line
## IMPORTANT: run the following line only, not together with the next line
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
system("mkdir credentials")
save(twitCred, file = "Credentials/twitCred.Rdata")
system("mkdir credentials")
rm(list=ls(all=TRUE))
library(data.table)
library(reshape2)
library(MortalitySmooth)
setwd("C:/Users/jmaburto/Documents/GitHub/Violence-and-Lifespan-variation")
#### sex=1 <- males
#### 1. Infectious and respiratory diseases, 2. Cancers, 3. Circulatory,
#### 4. Birth, 5. Diabetes, 6. Other Medical Care AM
#### 7. IHD, 8. HIV, 9. Suicide, 10. Lung Cancer,
#### 11. Cirrhosis, 12. Homicide, 13. Road traffic accidents,
#### 14. other heart diseases, 15. Ill-defined causes, 16. All other Non-AM
#### Note: these data do not contain Not Specified categories
# These data comes from INEGI data micro files
load('Data/Counts&Rates_1990-2015Mex.RData')
# Get total for the country
National <- Data_Counts[, lapply(.SD, sum, na.rm=TRUE), by= list(year,sex,age),
.SDcols=colnames(Data_Counts)[5:length(colnames(Data_Counts))]]
National <- National[National$year > 1994 & National$year < 2016,]
# State specific data
States   <- Data_Counts[Data_Counts$year > 1994 & Data_Counts$year < 2016,]
# Check that we have only the yaers we are interested in
years    <- unique(National$year)
ages     <- unique(National$age)
# An example of smoothing one cause
DX      <- acast(National[National$sex==1,], age~year, value.var = colnames(National)[i], fill = 0,drop = F)
EX      <- acast(National[National$sex==1,], age~year, value.var = "Pop", fill = 0,drop=F)
i <- causes[1]
causes <- 5:21
i <- causes
DX      <- acast(National[National$sex==1,], age~year, value.var = colnames(National)[i], fill = 0,drop = F)
EX      <- acast(National[National$sex==1,], age~year, value.var = "Pop", fill = 0,drop=F)
National.smooth 	<- data.table(as.matrix(National)[,1:3])
DX      <- acast(National[National$sex==1,], age~year, value.var = colnames(National)[i], fill = 0,drop = F)
EX      <- acast(National[National$sex==1,], age~year, value.var = "Pop", fill = 0,drop=F)
DX
setwd("C:/Users/jmaburto/Documents/GitHub/Violence-and-Lifespan-variation")
#### sex=1 <- males
#### 1. Infectious and respiratory diseases, 2. Cancers, 3. Circulatory,
#### 4. Birth, 5. Diabetes, 6. Other Medical Care AM
#### 7. IHD, 8. HIV, 9. Suicide, 10. Lung Cancer,
#### 11. Cirrhosis, 12. Homicide, 13. Road traffic accidents,
#### 14. other heart diseases, 15. Ill-defined causes, 16. All other Non-AM
#### Note: these data do not contain Not Specified categories
# These data comes from INEGI data micro files
load('Data/Counts&Rates_1990-2015Mex.RData')
# Get total for the country
National <- Data_Counts[, lapply(.SD, sum, na.rm=TRUE), by= list(year,sex,age),
.SDcols=colnames(Data_Counts)[5:length(colnames(Data_Counts))]]
National <- National[National$year > 1994 & National$year < 2016,]
# State specific data
States   <- Data_Counts[Data_Counts$year > 1994 & Data_Counts$year < 2016,]
# Check that we have only the yaers we are interested in
years    <- unique(National$year)
ages     <- unique(National$age)
# Now, smooth each cause independently, then calculate proportions and apply those to
# national lifetables.
source("R/Functions.R")
National.smooth 	<- data.table(as.matrix(National)[,1:3])
causes <- 5:21
DX      <- acast(National[National$sex==1,], age~year, value.var = colnames(National)[i], fill = 0,drop = F)
#check the directory where you are
setwd("C:/Users/jmaburto/Desktop/paa_2017_social_media-master/Collect_Tweets")
library(streamR)
library(ROAuth)
source('functions_by_pablobarbera.R')
load("credentials/twitCred.Rdata")
sampleStream("data/tweets_random.json", timeout = 60,
oauth = twitCred)
tweets <- parseTweets("data/tweets_random.json", verbose = TRUE)
## you may see a warning related to tweets that have been deleted
names(tweets)
head(tweets)
table(tweets$lang)
##Which of these tweets was sent by the person with more followers?
tweets$followers_count
max(tweets$followers_count)
which(tweets$followers_count == max(tweets$followers_count))
##Text of the tweet from the person with the highest number of followers
tweets$text[which(tweets$followers_count == max(tweets$followers_count))]
tweets$screen_name[which(tweets$followers_count == max(tweets$followers_count))]
## when the tweet was posted
tweets$created_at[which(tweets$followers_count == max(tweets$followers_count))]
tweets$[which(tweets$followers_count == max(tweets$followers_count))]
tweets[which(tweets$followers_count == max(tweets$followers_count))]
filterStream(file.name="data/tweets_chicago.json", locations=c(-88.31,41.36,-87.13,42.31),
timeout=60, oauth=twitCred)
tweets_chicago<- parseTweets("data/tweets_chicago.json", verbose = TRUE)
head(tweets_chicago)
#Tweets from Mexico or in Spanish
filterStream(file.name="data/tweets_mexico_spanish.json", locations=c(-117.6,13.1,-85.26,33.74),
timeout=60, language="es", oauth=twitCred)
tweets_mexico_spanish<- parseTweets("data/tweets_mexico_spanish.json", verbose = TRUE)
#Tweets that match a predefined keyword
filterStream(file.name="data/tweets_demog.json", track = c("fertility","mortality","migration","population","demography"),
timeout=20, oauth=twitCred)
tweets_demog <- parseTweets("data/tweets_demog.json", verbose = TRUE)
#####
## COLLECTING A RECENT SET OF TWEETS FROM A USER
#####
getTimeline(filename="data/tweets_Bil.json", screen_name="FCBillari", n=1000, oauth_folder="./credentials")
tweets_Bil <- parseTweets("data/tweets_Bil.json")
names(tweets_Bil)
head(tweets_Bil)
## obtain a list of followers for a given user
getFollowers(screen_name = "FCBillari",oauth_folder="./credentials")
getTimeline(filename="data/example_timeline_follower.json", id="235225127", n=1000, oauth_folder="./credentials")
### PAA 2017
### Workshop on Social Media for Demographic Research
### April 2017
### Zagheni-Polimis-Fiorio
### Collect and Analyze Tweets
### Part 3: Extract the URL for the profile picture of Twitter users
#check the directory where you are
getwd()
library(rjson)
library(RCurl)
## Read in some Twitter data that you (or someone else) have collected.
## The data would be in json format
## each line is one tweet
data <- readLines("data/tweets_test.json")
nof_lines <- length(data)
nof_lines
data.list<-lapply(data,function(x) fromJSON(x))
data.list[[1]]
data.list[[1]]$user$profile_image_url
data.list[[10]]$user$profile_image_url
rm(list=ls(all=TRUE))
library(data.table)
library(reshape2)
library(MortalitySmooth)
setwd("C:/Users/jmaburto/Documents/GitHub/Violence-and-Lifespan-variation")
# These data comes from INEGI data micro files
load('Data/Counts&Rates_1990-2015Mex.RData')
# Get total for the country
National <- Data_Counts[, lapply(.SD, sum, na.rm=TRUE), by= list(year,sex,age),
.SDcols=colnames(Data_Counts)[5:length(colnames(Data_Counts))]]
National <- National[National$year > 1994 & National$year < 2016,]
States   <- Data_Counts[Data_Counts$year > 1994 & Data_Counts$year < 2016,]
years    <- unique(National$year)
years
ages     <- unique(National$age)
source("R/Functions.R")
National.smooth 	<- data.table(as.matrix(National)[,1:3])
National.smooth
causes <- 5:21
causes[1]
i <- causes[1]
DX      <- acast(National[National$sex==1,], age~year, value.var = colnames(National)[i], fill = 0,drop = F)
EX      <- acast(National[National$sex==1,], age~year, value.var = "Pop", fill = 0,drop=F)
DX
EX
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
offset = log(EX[,1]),
method = 3,
lambda = 1e3)
fit
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W,
offset = log(EX[,1]),
method = 3,
lambda = 1e3)
W     		  <- EX*0
W[EX == 0] 	<- 1
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W,
offset = log(EX[,1]),
method = 3,
lambda = 1e3)
W
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
method = 3,
lambda = 1e3)
w = W[,1]
w
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
method = 3,
lambda = 1e3)
plot(ages, log(DX[,1]/EX[,1]))
plot(ages, log(DX[,1]/EX[,1]))
W[,1]
EX[,1]
# the weight matrix
W     		  <- EX*0
W[EX != 0] 	<- 1
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
method = 3,
lambda = 1e3)
plot(fit)
# now smooth
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]))
# now smooth
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
method = 3,
lambda = 1e1)
plot(fit)
# now smooth
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
method = 3,
lambda = 1e-1)
?Mort1Dsmooth
# now smooth
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
control=list(RANGE=c(10^0, 10^8)))
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
control=list(RANGE=c(10^-0.5, 10^8)))
# now smooth
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
control=list(RANGE=c(10^0, 10^8)))
fit
plot(fit)
# now smooth
fit   	<- Mort1Dsmooth(
x = ages,
y = DX[,1],
w = W[,1],
offset = log(EX[,1]),
control=list(RANGE=c(10^1, 10^8)))
plot(fit)
